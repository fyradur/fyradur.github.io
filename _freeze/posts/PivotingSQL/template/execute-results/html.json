{
  "hash": "5ba856c3194f2ec5f652d2649e5041d7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Pivoting in SQL\"\nauthor: \"John Möller\"\ndate: \"6/11/2025\"\ndraft: false\n---\n# Long and wide data\nConsider these two tables (made up data):\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 'Longer' table\n\n|Store       |Day     |Status |\n|:-----------|:-------|:------|\n|Media Markt |Weekday |Open   |\n|Media Markt |Weekend |Closed |\n|Elgiganten  |Weekday |Open   |\n|Elgiganten  |Weekend |Open   |\n|Expert      |Weekday |Closed |\n|Expert      |Weekend |Closed |\n\n\n:::\n:::\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n\n\nTable: 'Wider' table\n\n|Store       |Weekday |Weekend |\n|:-----------|:-------|:-------|\n|Media Markt |Open    |Closed  |\n|Elgiganten  |Open    |Open    |\n|Expert      |Closed  |Closed  |\n\n\n:::\n:::\n\n\nThey contain the same kind of information (except perhaps specifying the open status as specifically \"Status\"). Each of these forms have different advantages, thus it would be useful to be able to convert between these two formats in SQL.\n\n# Pivot longer\n\n\n\nConsider the table birthstatistics which first lines looks like this:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT * FROM birthstatistics\nLIMIT 5\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|region              |sex   |foreign/Swedish background                                                |   2002|   2003|   2004|   2005|   2006|   2007|   2008|   2009|   2010|   2011|   2012|   2013|   2014|   2015|   2016|   2017|   2018|   2019|   2020|\n|:-------------------|:-----|:-------------------------------------------------------------------------|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|------:|\n|01 Stockholm county |boys  |foreign born                                                              |  13346|  13157|  12759|  12675|  13271|  14325|  15126|  16074|  16901|  18075|  19050|  20059|  20827|  21843|  23084|  25124|  26270|  27060|  26484|\n|01 Stockholm county |boys  |born in Sweden with two foreign born parents                              |  31596|  32185|  32785|  33456|  34282|  35224|  36180|  37107|  38221|  39262|  40386|  41639|  43249|  45001|  46696|  48375|  50232|  52305|  53741|\n|01 Stockholm county |boys  |born in Sweden with one parent born in Sweden and one foreign born parent |  29815|  30395|  30976|  31565|  32102|  32667|  33368|  34193|  35105|  35894|  36845|  37945|  39228|  40391|  41558|  42512|  43310|  44123|  44619|\n|01 Stockholm county |boys  |born in Sweden with two parents born in Sweden                            | 131708| 133236| 134604| 135502| 136532| 137152| 137235| 137895| 138408| 138634| 138838| 140035| 141358| 142826| 143973| 144656| 144897| 144727| 144212|\n|01 Stockholm county |girls |foreign born                                                              |  12946|  12732|  12570|  12570|  13376|  14356|  15184|  16107|  16738|  17719|  18685|  19278|  19976|  20694|  21615|  23256|  24556|  25475|  24805|\n\n</div>\n:::\n\n\nLet's say we want to do a bunch of operations where we specify mathematical\nconstraints on the year number. Let's say one of them is to get the data\nwhere the year is an even number.\nIf there was a column called Year we could specify \"WHERE Year % 2 = 0\".\nBut we can't do that as each year is a column and not a cell value in a column.\n Thus we would like instead a form where there was a column called \"Year\".\nThen we can have the values in each cell be inside a single column that we will call \"Persons\". This is one way to achieve that in SQL (not the prettiest way, but one of the most straightforward):\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE View long_table AS\nSELECT region, sex, 'foreign/Swedish', 2002 as Year, [2002] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2003 as Year, [2003] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2004 as Year, [2004] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2005 as Year, [2005] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2006 as Year, [2006] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2007 as Year, [2007] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2008 as Year, [2008] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2009 as Year, [2009] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2010 as Year, [2010] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2011 as Year, [2011] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2012 as Year, [2012] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2013 as Year, [2013] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2014 as Year, [2014] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2015 as Year, [2015] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2016 as Year, [2016] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2017 as Year, [2017] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2018 as Year, [2018] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2019 as Year, [2019] as Persons FROM birthstatistics\nUNION ALL\nSELECT region, sex, 'foreign/Swedish', 2020 as Year, [2020] as Persons FROM birthstatistics;\n```\n:::\n\n\nNow we can do a statement like the following:\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT * FROM long_table\nWHERE Year % 2 = 0 AND sex = \"girls\" AND Persons > 100000\nLIMIT 5;\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|region                    |sex   |'foreign/Swedish' | Year| Persons|\n|:-------------------------|:-----|:-----------------|----:|-------:|\n|01 Stockholm county       |girls |foreign/Swedish   | 2002|  125531|\n|14 Västra Götaland county |girls |foreign/Swedish   | 2002|  120074|\n|01 Stockholm county       |girls |foreign/Swedish   | 2004|  127747|\n|14 Västra Götaland county |girls |foreign/Swedish   | 2004|  118544|\n|01 Stockholm county       |girls |foreign/Swedish   | 2006|  129493|\n\n</div>\n:::\n\n\n# Pivot wider\nNow let's say we want boys and girls to be columns. We can achieve that with the following:\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE VIEW My_view AS\nSELECT region, 'foreign/Swedish', Year,\n  SUM(CASE WHEN sex = 'boys' THEN Persons ELSE 0 END) AS Boys,\n  SUM(CASE WHEN sex = 'girls' THEN Persons ELSE 0 END) AS Girls\nFROM long_table\nGROUP BY region, 'foreign/Swedish', Year\n```\n:::\n\n\nWhy are we using SUM? Well in this example we kind of assume that given a distinct\ncombination of the columns 'region', 'foreign/Swedish' and 'Year', then there only exists on row where 'sex' is specified as for example boy, and the value in 'Persons' is the value we'll put under the column 'boy' in the widened table with that combination. But what if there are multiple? One way for example to deal with it is to just pick the first row and ignore the others. But one way that usually generalizes well is to sum all of them (perhaps each row symbolizes a sub-region for example).\n\nHere's an example of a query using the the view with widened data:\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT * FROM My_View\nWHERE Year % 2 = 0\nLIMIT 5\n```\n\n\n<div class=\"knitsql-table\">\n\n\nTable: 5 records\n\n|region              |'foreign/Swedish' | Year|   Boys|  Girls|\n|:-------------------|:-----------------|----:|------:|------:|\n|01 Stockholm county |foreign/Swedish   | 2002| 206465| 196752|\n|01 Stockholm county |foreign/Swedish   | 2004| 211124| 200638|\n|01 Stockholm county |foreign/Swedish   | 2006| 216187| 205821|\n|01 Stockholm county |foreign/Swedish   | 2008| 221909| 210582|\n|01 Stockholm county |foreign/Swedish   | 2010| 228635| 216624|\n\n</div>\n:::\n\n\nAs an example let's create two graphs for the total boys through the years and the total\ngirls through the years.\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE VIEW My_total AS\nSELECT Year, SUM(Boys) AS Boys, SUM(Girls) AS Girls\nFROM My_view\nGROUP BY Year\n```\n:::\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nmy_view_df <- dbGetQuery(con, \"SELECT * FROM My_total\")\nggplot(my_view_df, aes(Year, Boys)) + geom_line()\n```\n\n::: {.cell-output-display}\n![](template_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nggplot(my_view_df, aes(Year, Girls)) + geom_line()\n```\n\n::: {.cell-output-display}\n![](template_files/figure-html/unnamed-chunk-10-2.png){width=672}\n:::\n:::\n\n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "template_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}